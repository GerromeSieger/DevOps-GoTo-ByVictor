apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-deployment
  namespace: default
  labels:
    app: react
    tier: frontend
    framework: react
spec:
  replicas: 4
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: react
      tier: frontend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: react
        tier: frontend
        framework: react
      annotations:
        prometheus.io/scrape: "true"
    spec:
      containers:
      - name: react-app
        image: gerrome/react-site
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        env:
        - name: NODE_ENV
          value: "production"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: [react]
              topologyKey: "kubernetes.io/hostname"

---
apiVersion: v1
kind: Service
metadata:
  name: react-service
  namespace: default
  labels:
    app: react
    tier: frontend
    framework: react
spec:
  type: ClusterIP
  selector:
    app: react
    tier: frontend
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80