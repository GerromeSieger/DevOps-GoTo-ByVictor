pipeline {
    environment {
        DOCKER_TAG = sh(script: 'date +%Y%m%d_%H%M%S', returnStdout: true).trim()
    }       
    agent any  
    stages {
        stage('Build') {
            environment {
                DOCKER_IMAGE = credentials('DOCKER_IMAGE')
                DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
            }            
            agent {
                docker { 
                    image 'docker:dind'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -u root:root'
                    reuseNode true
                }
            }
            
            steps {
                script {
                    echo "DOCKER_IMAGE: ${DOCKER_IMAGE}"
                    echo "DOCKER_TAG: ${DOCKER_TAG}"
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    customImage.push()
                    customImage.push("latest")
                    sh 'docker logout'
                }
            }
            
            post {
                always {
                    sh 'docker rmi docker:dind || true'
                }
            }
        }
        
        stage('Deploy') {
            environment {
                MANIFEST_REPO = credentials('MANIFEST_REPO')
                DOCKER_IMAGE = credentials('DOCKER_IMAGE')
            }
            agent {
                docker {
                    image 'ubuntu:22.04'
                    args '-u root:root'
                    reuseNode true
                }
            }
            steps {
                script {
                    sh """
                        #!/bin/bash
                        set -e  # Exit on any error
                        
                        echo "Installing git..."
                        apt update && apt install -y git
                        
                        echo "Cloning repository..."
                        git clone "${MANIFEST_REPO}" k8s-repo
                        cd k8s-repo
                        
                        echo "Configuring git..."
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins"
                        
                        echo "Updating manifest file..."
                        awk -v image="${DOCKER_IMAGE}:${DOCKER_TAG}" '
                            /image:/ {\$0 = "        image: " image}
                            {print}
                        ' app.yml > temp.yml && mv temp.yml app.yml
                        
                        # Show the changes
                        echo "Git status:"
                        git status
                        
                        # Use single brackets and quote the command substitution
                        if [ -n "\$(git status -s)" ]; then
                            echo "Changes detected. Committing and pushing..."
                            git add .
                            git commit -m "Update image tag to ${DOCKER_TAG}"
                            git push origin main
                        else
                            echo "No changes detected in Kubernetes manifests."
                        fi
                    """
                }
            }
            post {
                always {
                    sh 'docker rmi ubuntu:22.04 || true'
                }
            }        
        }
    }
    
    post {
        always {
            cleanWs()
            sh 'docker system prune -af || true'
        }
    }
}