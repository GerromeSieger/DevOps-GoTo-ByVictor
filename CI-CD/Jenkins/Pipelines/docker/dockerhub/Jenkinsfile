pipeline {
    agent any
    environment {
       DOCKER_TAG = sh(script: 'date +%Y%m%d_%H%M%S', returnStdout: true).trim()
    }
    stages {
        stage('Build') {
            environment {
                DOCKER_IMAGE = credentials('DOCKER_IMAGE')
                DOCKERHUB_CREDENTIALS = credentials('DOCKERHUB_CREDENTIALS')
            }            
            agent {
                docker { 
                    image 'docker:dind'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -u root:root'
                    reuseNode true
                }
            }
            
            steps {
                script {
                    echo "DOCKER_IMAGE: ${DOCKER_IMAGE}"
                    echo "DOCKER_TAG: ${DOCKER_TAG}"
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    customImage.push()
                    customImage.push("latest")
                    sh 'docker logout'
                }
            }
            
            post {
                always {
                    sh 'docker rmi docker:dind --force || true'
                }
            }
        }

    stage ('Deploy') {
        environment {
            HOST_IP = credentials('HOST_IP')
            DOCKERHUB_CREDENTIALS = credentials('DOCKERHUB_CREDENTIALS')
            DOCKER_IMAGE = credentials('DOCKER_IMAGE')
        }        
        agent { 
            docker { 
                image 'ubuntu:22.04'
                reuseNode true 
            }  
        } 
        steps {
            withCredentials([sshUserPrivateKey(credentialsId: 'REMOTE_SERVER_CRED', keyFileVariable: 'SSH_PRIVATE_KEY', usernameVariable: 'REMOTE_USER')]) {
                sh """
                    apt update && apt install openssh-client -y
                    ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ${REMOTE_USER}@${HOST_IP} '
                    
                    # Login to DockerHub
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin

                    echo "Cleaning up old containers..."
                    docker ps -q --filter name=react-app | xargs -r docker stop
                    docker ps -aq --filter name=react-app | xargs -r docker rm
                    
                    echo "Pulling new image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                    
                    echo "Running new container..."
                    docker run -d --name react-app -p 3000:80 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    
                    echo "Verifying deployment..."
                    docker ps | grep react-app
                    
                    echo "Logging out of Docker Hub..."
                    docker logout
                    '
                """
            }
        }
        post {
            always {
                sh 'docker rmi ubuntu:22.04 || true'
            }
        }                 
    }
    }

    post {
        always {
            cleanWs()
            sh 'docker system prune -af || true'
        }
    }
}