stages:
  - build
  - deploy

variables:
  DOCKER_TAG: $CI_COMMIT_SHA

buildAndPush:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  only:
    - main  

deploy:
  stage: deploy
  image: ubuntu:22.04
  variables:
    DOCKER_CONTAINER_NAME: react-app
    CONTAINER_PORT: 3000
    HOST_PORT: 80
  before_script:
    - 'which ssh-agent || ( apt update -y && apt install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - |
      # Function to handle errors
      handle_error() {
        echo "Error: $1"
        exit 1
      }
      
      # Deploy with error handling
      ssh $USER@$HOST "
        set -e  # Exit on any error
        echo 'Logging into Docker Hub...'
        echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin || handle_error 'Docker login failed'
        
        echo 'Cleaning up old containers...'
        if docker ps -q --filter name=$DOCKER_CONTAINER_NAME; then
          docker ps -q --filter name=$DOCKER_CONTAINER_NAME | xargs docker stop || handle_error 'Failed to stop container'
          docker ps -aq --filter name=$DOCKER_CONTAINER_NAME | xargs docker rm || handle_error 'Failed to remove container'
        fi
        
        echo 'Pulling new image: $DOCKER_IMAGE:$DOCKER_TAG'
        docker pull $DOCKER_IMAGE:$DOCKER_TAG || handle_error 'Failed to pull image'
        
        echo 'Running new container...'
        docker run -d \
          --name $DOCKER_CONTAINER_NAME \
          -p $CONTAINER_PORT:$HOST_PORT \
          --restart unless-stopped \
          $DOCKER_IMAGE:$DOCKER_TAG || handle_error 'Failed to start container'
        
      "