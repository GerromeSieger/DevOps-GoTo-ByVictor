stages:
  - code-scan
  - container-scan

cache:
  key: ${CI_JOB_NAME}
  paths:
    - .npm/

.snyk-setup: &snyk-setup
  before_script:
    - apt-get update && apt-get install -y ca-certificates
    - npm install -g snyk@latest --cache .npm --prefer-offline

snyk-code-scan:
  stage: code-scan
  image: node:18-slim
  <<: *snyk-setup
  script:
    - snyk code test --severity-threshold=high --json-file-output=snyk-code-results.json || true
    - test -f snyk-code-results.json || echo '{}' > snyk-code-results.json
  artifacts:
    paths:
      - snyk-code-results.json
    expire_in: 1 week
    when: always
  variables:
    SNYK_TOKEN: $SNYK_TOKEN
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

snyk-container-scan:
  stage: container-scan
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache nodejs npm
    - npm install -g snyk@latest
  script:
    # Scan Dockerfile for vulnerabilities
    - snyk container test --file=Dockerfile --json-file-output=snyk-dockerfile-results.json || true
    - test -f snyk-dockerfile-results.json || echo '{}' > snyk-dockerfile-results.json

    # Build and scan the Docker image
    - docker build -t myapp:latest .
    - snyk container test myapp:latest --json-file-output=snyk-image-results.json || true
    - test -f snyk-image-results.json || echo '{}' > snyk-image-results.json
  artifacts:
    paths:
      - snyk-dockerfile-results.json
      - snyk-image-results.json
    expire_in: 1 week
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
