pipeline {
    agent any

    stages {
        stage('Test') {
            environment {
                SONAR_TOKEN = credentials('SONAR_TOKEN')
                SONAR_HOST_URL = credentials('SONAR_HOST_URL')
                PROJECT_KEY = credentials('PROJECT_KEY')
            } 
            agent {
                docker { 
                    image 'sonarsource/sonar-scanner-cli:latest'
                    args '-u root'
                    reuseNode true  
                }
              }
            steps {
                script {
                    sh """
                        sonar-scanner \
                            -Dsonar.projectKey=${PROJECT_KEY} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }

            post {
                always {
                    sh 'docker rmi sonarsource/sonar-scanner-cli:latest || true'
                }
            }            
        }

        stage('Build') {
            environment {
                DOCKER_IMAGE = credentials('docker-image')
                DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
            }            
            agent {
                docker { 
                    image 'docker:dind'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -u root:root'
                    reuseNode true
                }
            }
            
            steps {
                script {
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    def customImage = docker.build("${DOCKER_IMAGE}")
                    customImage.push()
                    customImage.push("${DOCKER_TAG}")
                    sh 'docker logout'
                }
            }
            
            post {
                always {
                    sh 'docker rmi docker:dind || true'
                }
            }
        }

        stage ('Deploy') {     
            agent { 
                docker { 
                    image 'ubuntu:22.04'
                    args '-u root'
                    reuseNode true 
                }  
            } 
            steps {
                withCredentials([
                    string(credentialsId: 'manifest-repo', variable: 'K8S_MANIFEST_REPO'),
                    string(credentialsId: 'access-token', variable: 'MANIFEST_REPO_PAT'),
                    file(credentialsId: 'kubeconfig-file', variable: 'KUBECONFIG_FILE')
                ]) {
                    sh '''
                        apt update && apt install curl git -y
                        mkdir -p $HOME/.kube
                        cat "${KUBECONFIG_FILE}" >> $HOME/.kube/config
                        chmod 600 $HOME/.kube/config
                        curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
                        chmod +x ./kubectl
                        mv ./kubectl /usr/local/bin/kubectl
                        git clone https://x-access-token:${MANIFEST_REPO_PAT}@${K8S_MANIFEST_REPO} k8s-manifests
                        kubectl get nodes
                    '''
                }
            }
            post {
                always {
                    sh 'docker rmi ubuntu:22.04 || true'
                }
            }                 
        }
    }

    post {
        always {
            cleanWs()
            sh 'docker system prune -af || true'
        }
    }
}